% plotAllKernels.m
%
% Function to plot all kernels. Also shows variance explained. Generates
%  separate plots for spikeRate and medFiltV.
% Requires the structs generated by computeKernels_pData()
%
% Adapted from plotAllKernels() in 2PAnalysisCode-Helen
%
% INPUT:
%   kernels - kernels struct from computeKernels_pData()
%   kernelParams - kernel parameters struct
%   ttl - title for whole plot
%
% OUTPUT:
%   f - handle to figure
%   also produces plot
%
% CREATED: 9/25/20
% UPDATED: 9/25/20
%

function f = plotAllKernels(kernels, kernelParams, flipRev, ttl)
    % get type of ephysData
    ephysDatType = fieldnames(kernels);
    
    % loop through different fields of kernels
    for i = 1:length(ephysDatType)
        % get all fields in kernels struct (which kernels computed)
        kernelFields = fieldnames(kernels.(ephysDatType{i}));
        numSubplots = length(kernelFields);
        subplotRows = 2;
        subplotCols = ceil(numSubplots/subplotRows);
        
        f(i) = figure('units','normalized','outerposition',[0 0 1 1]);
        
        for j = 1:numSubplots

            % logical to flip axis for reverse kernels
            if ((kernelFields{j}(1) == 'r') && (flipRev))
                lags = -1 * kernelParams.t;
            else
                lags = kernelParams.t;
            end


            subplot(subplotRows, subplotCols, j);
            hold on;
            plot(lags, ...
                kernels.(ephysDatType{i}).(kernelFields{j}).kernel, ...
                'LineWidth', 1.5);
            legendTxt = sprintf('Var Expl %.2f', ...
                kernels.(ephysDatType{i}).(kernelFields{j}).varExp);

            xlabel('Time (s)');
            xlim([-1*kernelParams.winLen kernelParams.winLen]);

    %         if (strcmpi(kernelFields{i}, 'fFwdVel'))
    %             ylim([-2e-4 6e-4]);
    %         elseif (strcmpi(kernelFields{i}, 'fYawVel'))
    %             ylim([-2e-5 4e-5]);
    %         elseif (strcmpi(kernelFields{i}, 'rYawVel'))
    %             ylim([-40 60]);
    %         end
            y = ylim;

            % x-axis line
            line([-1*kernelParams.winLen kernelParams.winLen], [0,0],...
                'Color', 'black');

            % y-axis line
            line([0,0], y, 'Color', 'black');
            ylim(y);

            title(kernelFields{j});
            legend(legendTxt);
        end

        fullTitle = sprintf('%s %s', ttl, ephysDatType{i});
        suptitle(fullTitle);
    end
    
end